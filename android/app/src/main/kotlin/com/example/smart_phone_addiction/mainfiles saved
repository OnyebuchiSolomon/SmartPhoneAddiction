package com.example.smart_phone_addiction
import android.app.AppOpsManager
import android.app.admin.DevicePolicyManager
import android.content.ComponentName
import android.content.Intent
import android.content.SharedPreferences
import android.content.pm.PackageManager
import android.net.Uri
import android.os.Build
import android.provider.Settings
import android.widget.Toast
import androidx.annotation.RequiresApi
import androidx.core.content.ContextCompat
import io.flutter.embedding.android.FlutterActivity
import io.flutter.embedding.engine.FlutterEngine
import io.flutter.plugin.common.MethodCall
import io.flutter.plugin.common.MethodChannel


class MainActivity : FlutterActivity() {
    companion object {
        private const val CHANNEL = "com.example.app_locker/accessibility"
        private const val REQUEST_OVERLAY_PERMISSION = 1001
    }
    private lateinit var devicePolicyManager: DevicePolicyManager
    private lateinit var compName: ComponentName
    private lateinit var methodChannel: MethodChannel
    @RequiresApi(Build.VERSION_CODES.N)
    override fun configureFlutterEngine(flutterEngine: FlutterEngine) {
        super.configureFlutterEngine(flutterEngine)

//        devicePolicyManager = getSystemService(Context.DEVICE_POLICY_SERVICE) as DevicePolicyManager
//        compName = ComponentName(this, MyDeviceAdminReceiver::class.java)
//        val packageNameToSuspend = "com.whatsapp"
//        suspendPackage(packageNameToSuspend)
//        Toast.makeText(this, "Package suspended: $packageNameToSuspend", Toast.LENGTH_SHORT).show()
        MethodChannel(flutterEngine.dartExecutor.binaryMessenger, CHANNEL)
                .setMethodCallHandler { call: MethodCall, result: MethodChannel.Result ->
                    when (call.method) {
//                        "updateWhitelist"->
//                            {
//                                val whitelist = call.argument<List<String>>("whitelist")!!
//                                updateWhitelist(whitelist)
//                                result.success(null)
//                            }


                        "openAccessibilitySettings" -> {
                            openAccessibilitySettings()
                            result.success(null)
                        }

                        "checkOverlayPermission" -> {
                            requestOverlayPermission()
//                            try {
//                                if (Settings.canDrawOverlays(this)) {
//                                    Toast.makeText(this, "Permission Granted for overlay window", Toast.LENGTH_SHORT).show()
//                                    //setIfServiceClosed("1")
//                                   // ContextCompat.startForegroundService(this, Intent(this, ForegroundService::class.java))
//                                } else {
//                                    requestOverlayPermission()
//                                }
//                            } catch (e: WindowManager.BadTokenException) {
//                                // Handle the exception gracefully, e.g., show a message to the user
//                                Toast.makeText(this, "Permission denied for overlay window", Toast.LENGTH_SHORT).show()
//                            }
                            // result.success(checkOverlayPermission())
                        }

                        "askUsageStatsPermission" -> {
                            if (!isAccessGranted()) {
                                val intent = Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS)
                                startActivity(intent)
                            }
                        }

                        "checkPassword" -> {
                            val password = call.argument<String>("password")
                            if (password == "1234567") {
                                result.success(true)
                            } else {
                                result.success(false)
                            }
                        }
//                        "stopForegroundService" -> {
//                            stopForegroundService()
//                        }
                    }
                }
        if (intent.getBooleanExtra("lock_screen", false)) {
            methodChannel.invokeMethod("showLockScreen", null)
        }
    }
    private fun openAccessibilitySettings() {
        val intent = Intent(Settings.ACTION_ACCESSIBILITY_SETTINGS)
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
        startActivity(intent)
    }
    /*
    @RequiresApi(Build.VERSION_CODES.N)
    private fun suspendPackage(packageName: String) {
        if (devicePolicyManager.isAdminActive(compName)) {
            devicePolicyManager.setPackagesSuspended(compName, arrayOf(packageName), true)
            Toast.makeText(this, "Package suspended: $packageName", Toast.LENGTH_SHORT).show()
        } else {
            Toast.makeText(this, "Device admin not active", Toast.LENGTH_SHORT).show()
        }
    }

    private fun updateWhitelist(whitelist: List<String>) {
        val prefs = PreferenceManager.getDefaultSharedPreferences(this)
        val editor = prefs.edit()
        val whitelistSet: Set<String> = HashSet(whitelist)
        editor.putStringSet("whitelist", whitelistSet)
        editor.apply()
    }
    private fun activateDeviceAdmin() {
        val intent = Intent(DevicePolicyManager.ACTION_ADD_DEVICE_ADMIN)
        intent.putExtra(DevicePolicyManager.EXTRA_DEVICE_ADMIN, compName)
        intent.putExtra(DevicePolicyManager.EXTRA_ADD_EXPLANATION, "Admin permission required to block unauthorized apps")
        startActivityForResult(intent, 123)
    }


    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if (requestCode == 123) {
            if (resultCode == RESULT_OK) {
                // Admin permission granted
                Log.d("MainActivity.kt.....", "Yes permission granted: ");
            } else {
                // Admin permission not granted
                Log.d("MainActivity.kt.....", "Admin permission not granted: ");
            }
        }

     */
    @RequiresApi(Build.VERSION_CODES.M)
    private fun requestOverlayPermission() {
        val intent = Intent(
                Settings.ACTION_MANAGE_OVERLAY_PERMISSION,
                Uri.parse("package:$packageName")
        )
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
        startActivityForResult(intent, REQUEST_OVERLAY_PERMISSION)
    }
//    override fun onNewIntent(intent: Intent) {
//        super.onNewIntent(intent)
//        if (intent.getBooleanExtra("lock_screen", false)) {
//            methodChannel.invokeMethod("showLockScreen", null)
//        }
  //  }
    @RequiresApi(Build.VERSION_CODES.M)
    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if (requestCode == REQUEST_OVERLAY_PERMISSION) {
            if (Settings.canDrawOverlays(this)) {
                Toast.makeText(this, "Overlay permission is granted", Toast.LENGTH_SHORT).show()
                // Permission granted, start the foreground service
               // setIfServiceClosed("1")
              //  ContextCompat.startForegroundService(this, Intent(this, ForegroundService::class.java))
            } else {
                // Permission denied, show a message or handle accordingly
                Toast.makeText(this, "Overlay permission is required", Toast.LENGTH_SHORT).show()
            }
        }
    }

    private fun isAccessGranted(): Boolean {
        return try {
            val packageManager = packageManager
            val applicationInfo = packageManager.getApplicationInfo(
                    packageName, 0
            )
            val appOpsManager: AppOpsManager = getSystemService(APP_OPS_SERVICE) as AppOpsManager
            val mode = appOpsManager.checkOpNoThrow(
                    AppOpsManager.OPSTR_GET_USAGE_STATS,
                    applicationInfo.uid, applicationInfo.packageName
            )
            mode == AppOpsManager.MODE_ALLOWED
        } catch (e: PackageManager.NameNotFoundException) {
            false
        }
    }
//    private fun setIfServiceClosed(data:String){
//        val editor: SharedPreferences.Editor =  saveAppData!!.edit()
//        editor.putString("is_stopped",data)
//        editor.apply()
//    }

    @RequiresApi(Build.VERSION_CODES.M)
     fun startForegroundService() {
       // if (Settings.canDrawOverlays(this)) {
           // setIfServiceClosed("1")
            ContextCompat.startForegroundService(this, Intent(this, ForegroundService::class.java))
       // }
    }

    private fun stopForegroundService(){
       // setIfServiceClosed("0")
        stopService( Intent(this, ForegroundService::class.java))
    }

    }



